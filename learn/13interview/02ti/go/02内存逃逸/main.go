package main

func main() {
	/**

	几个概念：
		栈分配：分配速度快，只需要CPU的两个指令“PUSH”和“RELEASE“进行分配和释放。
			   栈使用的是一级缓存， 它们通常都是被调用时处于存储空间中，调用完毕立即释放。

		堆分配：分配速度较慢，首先需要找到一块大小合适的内存块，之后还需要gc垃圾回收才能释放。
	           堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。

	现象：本应该分配在栈上的对象，跑在了堆上

	查看：go build -gcflags '-m -l' main.go

	场景：
		1、函数局部变量，返回指针，给外部使用

		2、interface类型的变量，例如fmt.Println()函数

		3、栈上内存分配不够

		4、闭包引用逃逸

		5、在切片上存储带指针的值，或者是存储指针

	优化意义：通过逃逸分析，可以尽量把那些不需要分配到堆上的变量直接分配到栈上，堆上的变量少了，会减轻分配堆内存的开销，同时也会减少GC的压力，提高程序的运行速度。
	*/
}
